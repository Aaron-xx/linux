// SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-3-Clause)
/*
 * Copyright (C) 2024, STMicroelectronics - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

/dts-v1/;
#include <dt-bindings/pinctrl/stm32-pinfunc.h>
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/rtc/rtc-stm32.h>
#include <dt-bindings/usb/pd.h>

#include "stm32mp135.dtsi"
#include "stm32mp13xd.dtsi"

/ {
	model = "STM32MP135D-AARON Discovery Board";
	compatible = "st,stm32mp135d-aaron", "st,stm32mp135";

	aliases {
		ethernet0 = &eth1;
		serial0 = &uart4;
	};

	chosen {
		stdout-path = "serial0:115200n8";
	};

	memory@c0000000 {
		device_type = "memory";
		reg = <0xc0000000 0x20000000>;
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		optee@de000000 {
			reg = <0xde000000 0x2000000>;
			no-map;
		};
	};

	vddcore: vddcore {
        compatible = "regulator-fixed";
        regulator-name = "vddcore";
        regulator-min-microvolt = <1250000>;
        regulator-max-microvolt = <1250000>;
        regulator-off-in-suspend;
        regulator-always-on;
	};

	vddcpu: vddcpu {
		compatible = "regulator-fixed";
		regulator-name = "vddcpu";
		regulator-min-microvolt = <1350000>;
		regulator-max-microvolt = <1350000>;
        regulator-off-in-suspend;
        regulator-always-on;
	};

	v3v3: v3v3 {
        compatible = "regulator-fixed";
        regulator-name = "v3v3";
        regulator-min-microvolt = <3300000>;
        regulator-max-microvolt = <3300000>;
        regulator-off-in-suspend;
        regulator-always-on;
    };

	vbus_otg: vbus_otg {
        compatible = "regulator-fixed";
        regulator-name = "vbus_otg";
        regulator-min-microvolt = <5000000>;
        regulator-max-microvolt = <5000000>;
        regulator-off-in-suspend;
		regulator-always-on;
    };

	vdd: vdd {
        compatible = "regulator-fixed";
        regulator-name = "vdd";
        regulator-min-microvolt = <3300000>;
        regulator-max-microvolt = <3300000>;
        regulator-off-in-suspend;
        regulator-always-on;
    };

	vdd_usb: vdd_usb {
        compatible = "regulator-fixed";
        regulator-name = "vdd_usb";
        regulator-min-microvolt = <3300000>;
        regulator-max-microvolt = <3300000>;
        regulator-off-in-suspend;
        regulator-always-on;
    };
};

&bsec{
	status = "okay";
};

&dma1 {
	sram = <&dma_pool>;
};

&dma2 {
	sram = <&dma_pool>;
};

&sram {
	dma_pool: dma-sram@0 {
		reg = <0x0 0x4000>;
		pool;
	};
};

&rcc{
	status = "okay";
};

&iwdg2 {
	timeout-sec = <32>;
	status = "okay";
};

&crc1 {
	status = "okay";
};

&rtc{
	status = "okay";
};

&eth1 {
	status = "okay";
	pinctrl-0 = <&eth1_pins_a>;
	pinctrl-1 = <&eth1_sleep_pins_a>;
	pinctrl-names = "default", "sleep";
	phy-mode = "rmii";
	max-speed = <100>;
	phy-handle = <&phy0_eth1>;
	nvmem-cells = <&ethernet_mac1_address>;
	nvmem-cell-names = "mac-address";

	mdio1 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";
		phy0_eth1: ethernet-phy@1 {
			compatible = "ethernet-phy-ieee802.3-c22";
			reset-gpios =  <&gpioa 6 GPIO_ACTIVE_LOW>;
			reg = <1>;
		};
	};
};

&timers1 {
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "okay";
	pwm1:pwm {
		pinctrl-0 = <&pwm1_pins_a>;
		pinctrl-1 = <&pwm1_sleep_pins_a>;
		pinctrl-names = "default","sleep";
		status = "okay";
	};
};

&timers4 {
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "okay";
	pwm4:pwm {
		pinctrl-0 = <&pwm4_pins_a>;
		pinctrl-1 = <&pwm4_sleep_pins_a>;
		pinctrl-names = "default", "sleep";
		status = "okay";
	};
	timer@3 {
		status = "okay";
	};
};

&m_can1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&can1_pins_a>;
	pinctrl-1 = <&can1_sleep_pins_a>;
	/delete-property/dmas;
	/delete-property/dma-names;
	status= "okay";
};

&spi5{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi5_pins_a>;
	pinctrl-1 = <&spi5_sleep_pins_a>;
	cs-gpios = <&gpioi 1 GPIO_ACTIVE_LOW>;
	status = "okay";

    spidev@0{
        compatible = "rohm,dh2228fv";
        reg = <0>;
        spi-max-frequency = <10000000>;
    };
};

&adc_1 {
	pinctrl-names = "default";
	pinctrl-0 = <&adc1_pins_a>;
	vdda-supply = <&vdd>;
	vref-supply = <&vdd>;
	status = "okay";

	adc1: adc@0 {
		#address-cells = <1>;
		#size-cells = <0>;
		st,min-sample-time-nsecs = <5000>;
		st,adc-channels = <11 12>;
		assigned-resolution-bits = <12>;//adc max 12 bit
		status = "okay";
	};
};

&sdmmc1 {
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_pins_a>;
	pinctrl-1 = <&sdmmc1_opendrain_pins_a>;
	pinctrl-2 = <&sdmmc1_sleep_pins_a>;
	cd-gpios = <&gpiof 15 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
	st,neg-edge;
	no-1-8-v;
	bus-width = <4>;
	vmmc-supply = <&v3v3>;
	#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";
};

&uart4{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart4_pins_a>;
	pirl-1 = <&uart4_sleep_pins_a>;
	status = "okay";
};

&usbh_ehci {
	phys = <&usbphyc_port0>;
	status = "okay";
};

&usbotg_hs {
	phys = <&usbphyc_port1 0>;
	phy-names = "usb2-phy";
	dr_mode = "otg";
	pinctrl-0 = <&usbotg_hs_pins_a>;
	pinctrl-names = "default";
	vbus-supply = <&vbus_otg>;
	status = "okay";
};

&usbphyc {
	status = "okay";
};

&usbphyc_port0 {
	phy-supply = <&vdd_usb>;
	st,current-boost-microamp = <1000>;
	st,decrease-hs-slew-rate;
	st,tune-hs-dc-level = <2>;
	st,enable-hs-rftime-reduction;
	st,trim-hs-current = <11>;
	st,trim-hs-impedance = <2>;
	st,tune-squelch-level = <1>;
	st,enable-hs-rx-gain-eq;
	st,no-hs-ftime-ctrl;
	st,no-lsfs-sc;
	/*
	 * Hack to keep hub active if wakeup source is enabled
	 * otherwise the hub will wakeup the port0 as soon as the v3v3_sw is disabled
	 */
	connector {
		compatible = "usb-a-connector";
		vbus-supply = <&vdd_usb>;
	};
};

&usbphyc_port1 {
	phy-supply = <&vdd_usb>;
	st,current-boost-microamp = <1000>;
	st,decrease-hs-slew-rate;
	st,tune-hs-dc-level = <2>;
	st,enable-hs-rftime-reduction;
	st,trim-hs-current = <11>;
	st,trim-hs-impedance = <2>;
	st,tune-squelch-level = <1>;
	st,enable-hs-rx-gain-eq;
	st,no-hs-ftime-ctrl;
	st,no-lsfs-sc;
};

&pinctrl {
	eth1_pins_a: eth1-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 1, AF11)>, /* ETH1_REF_CLK */
					 <STM32_PINMUX('B', 11, AF11)>, /* ETH1_TX_EN */
					 <STM32_PINMUX('G', 2, AF11)>, /* ETH1_MDC */
					 <STM32_PINMUX('G', 13, AF11)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, AF11)>; /* ETH1_TXD1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 2, AF11)>; /* ETH1_MDIO */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('A', 7, AF11)>, /* ETH1_CRS_DV */
					 <STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, AF11)>; /* ETH1_RXD1 */
			bias-disable;
		};
	};

	eth1_sleep_pins_a: eth1_sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_REF_CLK */
					 <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
					 <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_CRS_DV */
					 <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN */
					 <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
					 <STM32_PINMUX('G', 2, ANALOG)>, /* ETH1_MDC */
					 <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, ANALOG)>; /* ETH1_TXD1 */
		};
	};
	sdmmc1_pins_a: sdmmc1-0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					<STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					<STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
					<STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
					<STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc1_opendrain_pins_a: sdmmc1_opendrain-0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					<STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					<STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
					<STM32_PINMUX('C', 11, AF12)>; /* SDMMC1_D3 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc1_sleep_pins_a: sdmmc1_sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
					<STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
					<STM32_PINMUX('C', 10, ANALOG)>, /* SDMMC1_D2 */
					<STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
					<STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
					<STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
		};
	};

	uart4_pins_a: uart4-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 6, AF8)>; /* UART4_TX */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('D', 8, AF8)>; /* UART4_RX */
			bias-disable;
		};
	};

	uart4_sleep_pins_a: uart4_sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 6, ANALOG)>, /* UART4_TX */
					 <STM32_PINMUX('D', 8, ANALOG)>; /* UART4_RX */
		};
	};

	usbotg_hs_pins_a: usbotg-hs-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 10, ANALOG)>; /* OTG_ID */
		};
	};

	pwm1_pins_a: pwm1-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 8, AF1)>, /* TIM1_CH1N */
                   <STM32_PINMUX('F', 9, AF2)>; /* TIM1_CH1 */
			bias-pull-down;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	pwm1_sleep_pins_a:pwm1-sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 8, ANALOG)>, /* TIM1_CH1N */
                   <STM32_PINMUX('F', 9, ANALOG)>; /* TIM1_CH1 */
		};
	};


	pwm4_pins_a: pwm4-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 13, AF2)>; /* TIM4_CH2 */
			bias-pull-down;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	pwm4_sleep_pins_a: pwm4-sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 13, ANALOG)>; /* TIM4_CH2 */
		};
	};
	
	can1_pins_a: can1-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 0, AF9)>; /* CAN1_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 10, AF9)>; /* CAN1_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	can1_sleep_pins_a: can1_sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 0, ANALOG)>, /* CAN1_RX */
					 <STM32_PINMUX('G', 10, ANALOG)>; /* CAN1_TX */
		};
	};

	spi5_pins_a: spi5-0 {
		pins1 {
			pinmux = <STM32_PINMUX('E', 4, AF1)>; /* SPI5_MISO */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('H', 7, AF6)>, /* SPI5_SCK */
					 <STM32_PINMUX('H', 12, AF5)>; /* SPI5_MOSI */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi5_sleep_pins_a: spi5_sleep-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 4, ANALOG)>, /* SPI5_MISO */
					 <STM32_PINMUX('H', 7, ANALOG)>, /* SPI5_SCK */
					 <STM32_PINMUX('H', 12, ANALOG)>; /* SPI5_MOSI */
		};
	};

	adc1_pins_a: adc1-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 3, ANALOG)>, /* ADC1 inp12 */
					 <STM32_PINMUX('F', 13, ANALOG)>; /* ADC1 inp11 */
		};
	};
};